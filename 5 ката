def determinant(matrix):
    import numpy as np
    det = np.linalg.det(matrix)
    return(round(det))
    
    def alphanumeric(password):
    return password.isalnum()
    
    def increment_string(s):
    import re
    number = re.findall(r'\d+', s)
    if number:
        s_number = number[-1]
        s = s.rsplit(s_number, 1)[0]
        number = str(int(s_number) + 1)
        return s + '0' * (len(s_number) - len(number)) + number
    return s + '1'
    
    bases = [2, 3, 5]
    expos = [0, 0, 0]
    hamms = [1]
    for _ in range(1, n):
        next_hamms = [bases[i] * hamms[expos[i]] for i in range(3)]
        next_hamm = min(next_hamms)
        hamms.append(next_hamm)
        for i in range(3):
            expos[i] += int(next_hamms[i] == next_hamm)
    return hamms[-1]
    
      res=[]
    i=0
    for item in y:
        if item in x[i:]:
            res+=[item]
            i=x.index(item)+1
    return "".join(res)
